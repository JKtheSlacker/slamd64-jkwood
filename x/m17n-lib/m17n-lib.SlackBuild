#!/bin/sh
# $Id: m17n-lib.SlackBuild,v 1.3 2008/01/29 14:04:50 root Exp root $
# Copyright (c) 2008 Eric Hameleers <alien@slackware.com>
# Copyright 2008  Patrick J. Volkerding, Sebeka, MN  USA
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:         Eric Hameleers <alien@slackware.com>
# For:        m17n-lib
# Descr:      multilingualization of many aspects of applications
# URL:        http://m17n.org/
# Needs:      
# Changelog:  
# 1.5.0-1:    29/Jan/2008 by Eric Hameleers <alien@slackware.com>
#             * Initial build.
#               Also included are the m17n-db (which enhances the
#               functionality a great deal) plus the end user documentation.
# 
# Run 'sh m17n-lib.SlackBuild --cleanup' to build a Slackware package.
# The package (.tgz) plus descriptive .txt file are created in /tmp .
# Install using 'installpkg'. 
#
# -----------------------------------------------------------------------------

# Set initial variables:

PRGNAM=m17n-lib
SHORTNAM=m17n
VERSION=${VERSION:-1.5.0}
DBVERSION=${DBVERSION:-1.5.0}
DOCVERSION=${DOCVERSION:-1.5.0}
ARCH=${ARCH:-x86_64}
BUILD=${BUILD:-1}
TAG=${TAG:-}

DOCS="ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS README TODO"
DOCS_DB="ABOUT-NLS AUTHORS COPYING ChangeLog NEWS README"
DOCS_DOC="AUTHORS COPYING ChangeLog INSTALL NEWS README"

# Where do we look for sources?
CWD=$(pwd)
SRCDIR=$(dirname $0)
[ "${SRCDIR:0:1}" == "." ] && SRCDIR=${CWD}/${SRCDIR}

# Place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

SOURCE[0]="$SRCDIR/${PRGNAM}-${VERSION}.tar.gz"

SOURCE[1]="$SRCDIR/${SHORTNAM}-db-${DBVERSION}.tar.gz"

SOURCE[2]="$SRCDIR/${SHORTNAM}-docs-${DOCVERSION}.tar.gz"

##
## --- with a little luck, you won't have to edit below this point --- ##
##

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line ${LINENO}" | tee $OUTPUT/error-${PRGNAM}.log' ERR
# Catch unitialized variables:
set -u
P1=${1:-1}

# Slackware 11 and up need other option (gcc > 3.3.x)
if [ $(gcc -dumpversion | tr -d  '.' |cut -c 1-2) -gt 33 ]; then
  MOPT=tune
else
  MOPT=cpu
fi

case "$ARCH" in
  i386)      SLKCFLAGS="-O2 -march=i386 -m${MOPT}=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  i486)      SLKCFLAGS="-O2 -march=i486 -m${MOPT}=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  s390)      SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  powerpc)   SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
             ;;
  athlon-xp) SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
esac

# Create working directories:
mkdir -p $OUTPUT          # place for the package to be saved
mkdir -p $TMP/tmp-$PRGNAM # location to build the source
mkdir -p $PKG             # place for the package to be built
rm -rf $PKG/*             # always erase old package's contents
if [ "$P1" != "--oldbuild" ]; then
  # Use the "--oldbuild" parameter to keep old build files and continue;
  # By default we remove the remnants of previous build and continue.
  rm -rf $TMP/tmp-$PRGNAM/*
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PRGNAM-$VERSION"
echo "++"

cd $TMP/tmp-$PRGNAM
echo "Extracting the source archive(s) for $PRGNAM..."
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if $(file ${SOURCE[$i]} | grep -q ": bzip2"); then
    tar -xjvf ${SOURCE[$i]}
  elif $(file ${SOURCE[$i]} | grep -q ": gzip"); then
    tar -xzvf ${SOURCE[$i]}
  fi
done
chown -R root:root *
chmod -R u+w,go+r-w,a-s *
# Patch the docs makefile:
( cd $SHORTNAM-docs-$DOCVERSION
  patch -p0 < $SRCDIR/${SHORTNAM}-docs_makefile.patch \
    2>&1 | tee $OUTPUT/patch-$PRGNAM.log
)
cd ${PRGNAM}-${VERSION}
# Add the missing internal-flt.h file:
[ ! -r src/internal-flt.h ] && cp $SRCDIR/internal-flt.h src/

echo Building ...
LDFLAGS="$SLKLDFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
CFLAGS="$SLKCFLAGS" \
./configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var \
            --sysconfdir=/etc \
            --mandir=/usr/man \
            --without-gui \
            --disable-static \
            --program-prefix="" \
            --program-suffix="" \
            --build=$ARCH-slackware-linux \
            2>&1 | tee $OUTPUT/configure-${PRGNAM}.log
make 2>&1 | tee $OUTPUT/make-${PRGNAM}.log

# Install all the needed stuff to the package dir
# Use installwatch if available, to produce a logfile of the installation
# process that is more easily readable:
if $(which installwatch > /dev/null 2>&1); then
  installwatch -o $OUTPUT/install-${PRGNAM}.log make DESTDIR=$PKG install
else
  make DESTDIR=$PKG install 2>&1 |tee $OUTPUT/install-${PRGNAM}.log
fi
cd ..

# Compile and install the m17n database:
echo "Building the m17n database..."
echo "=======================" >> $OUTPUT/configure-${PRGNAM}.log
echo "=======================" >> $OUTPUT/make-${PRGNAM}.log
echo "=======================" >> $OUTPUT/install-${PRGNAM}.log
cd ${SHORTNAM}-db-${DBVERSION}
LDFLAGS="$SLKLDFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
CFLAGS="$SLKCFLAGS" \
./configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var \
            --sysconfdir=/etc \
            --program-prefix="" \
            --program-suffix="" \
            --build=$ARCH-slackware-linux \
            2>&1 | tee -a $OUTPUT/configure-${PRGNAM}.log
make 2>&1 | tee -a $OUTPUT/make-${PRGNAM}.log
if $(which installwatch > /dev/null 2>&1); then
  installwatch -o $OUTPUT/install-${PRGNAM}.log make DESTDIR=$PKG install
else
  make DESTDIR=$PKG install 2>&1 |tee -a $OUTPUT/install-${PRGNAM}.log
fi
cd ..

# Compile and install the m17n user documentation:
echo "Building the m17n user docs..."
echo "=======================" >> $OUTPUT/configure-${PRGNAM}.log
echo "=======================" >> $OUTPUT/make-${PRGNAM}.log
echo "=======================" >> $OUTPUT/install-${PRGNAM}.log
cd ${SHORTNAM}-docs-${DOCVERSION}
LDFLAGS="$SLKLDFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
CFLAGS="$SLKCFLAGS" \
./configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var \
            --sysconfdir=/etc \
            --mandir=/usr/man \
            --program-prefix="" \
            --program-suffix="" \
            --build=$ARCH-slackware-linux \
            2>&1 | tee -a $OUTPUT/configure-${PRGNAM}.log
make 2>&1 | tee -a $OUTPUT/make-${PRGNAM}.log
if $(which installwatch > /dev/null 2>&1); then
  installwatch -o $OUTPUT/install-${PRGNAM}.log make DESTDIR=$PKG install
else
  make DESTDIR=$PKG install 2>&1 |tee -a $OUTPUT/install-${PRGNAM}.log
fi
cd ..

# Add package documentation:
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION/{db,docs}
cd ${PRGNAM}-${VERSION}
cp -a $DOCS $PKG/usr/doc/$PRGNAM-$VERSION || true
cd ../${SHORTNAM}-db-${DBVERSION}
cp -a $DOCS_DB $PKG/usr/doc/$PRGNAM-$VERSION/db || true
cd ../${SHORTNAM}-docs-${DOCVERSION}
cp -a $DOCS_DOC $PKG/usr/doc/$PRGNAM-$VERSION/docs || true
cd ..
find $PKG/usr/doc -type f -exec chmod 644 {} \;

# Compress the man page(s):
if [ -d $PKG/usr/man/man3 ]; then
  ( cd $PKG/usr/man/man3
    for file in * ; do
      mv $file $(basename $file m17n)
    done
  )
fi
if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
  for i in $(find $PKG/usr/man -type l -name "*.?") ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

# Strip binaries:
cd $PKG
find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
cd -


# Add a package description:
mkdir -p $PKG/install
cat $SRCDIR/slack-desc > $PKG/install/slack-desc
if [ -f $SRCDIR/doinst.sh ]; then
  cat $SRCDIR/doinst.sh >> $PKG/install/doinst.sh
fi

# Build the package:
cd $PKG
makepkg --linkadd y --chown n $OUTPUT/${PRGNAM}-${VERSION}-${ARCH}_slamd64-${BUILD}${TAG}.tgz 2>&1 | tee $OUTPUT/makepkg-${PRGNAM}.log
